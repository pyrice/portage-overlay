diff --git a/.travis.yml b/.travis.yml
index 2483ba1..8bab5d5 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,20 +1,33 @@
+sudo: required
+
 language: python
 python:
-  - "3.2"
-  - "3.3"
-  - "3.4"
   - "2.7"
-  - "2.6"
-  
+  - "3.5"
+  - "3.6"
+  - "3.7"
+
+before_install:
+  - sudo apt-get -qq update
+  - sudo apt-get install -y software-properties-common
+  - sudo add-apt-repository -y -u ppa:ubuntu-toolchain-r/test
+  - sudo apt-get -qq update
+  - sudo apt-get install -y --allow-unauthenticated build-essential cmake
+
 # command to install dependencies, e.g. pip install -r requirements.txt --use-mirrors
+# Build steps taken from
+# https://github.com/nanomsg/nanomsg#build-it-with-cmake
 install:
   - git clone --quiet --depth=100 "https://github.com/nanomsg/nanomsg.git" ~/builds/nanomsg
       && pushd ~/builds/nanomsg
-      && ./autogen.sh
-      && ./configure
-      && make 
-      && sudo make install
-      && popd;
+  - export TRAVIS_TAG=$(cat .version)
+  - git checkout -b "${TRAVIS_TAG}"
+  - mkdir build && cd build
+  - cmake ..
+  - cmake --build .
+  - ctest -C Debug .
+  - sudo cmake --build . --target install
+  - sudo ldconfig && popd
 
-# command to run tests, e.g. python setup.py test      
+# command to run tests, e.g. python setup.py test
 script: LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib python setup.py test
diff --git a/README.md b/README.md
index e90d370..5788325 100644
--- a/README.md
+++ b/README.md
@@ -13,6 +13,14 @@ The following versions of Python are supported CPython 2.6+, 3.2+ and Pypy 2.1.0
 Bugs and change requests can be made
 [here](https://github.com/tonysimpson/nanomsg-python/issues).
 
+
+nanommsg library in /usr/local
+==============================
+
+
+If you're nanomsg is in /usr/local and your machine is not configured to find it there you can rename the usr_local_setup.cfg to setup.cfg to fix the problem.
+
+
 Example
 =======
 
diff --git a/_nanomsg_cpy/wrapper.c b/_nanomsg_cpy/wrapper.c
index 2b20fe9..7a0a2c1 100644
--- a/_nanomsg_cpy/wrapper.c
+++ b/_nanomsg_cpy/wrapper.c
@@ -375,10 +375,64 @@ _nanomsg_cpy_nn_recv(PyObject *self, PyObject *args)
 static PyObject *
 _nanomsg_cpy_nn_device(PyObject *self, PyObject *args)
 {
-    int socket_1, socket_2;
+    int socket_1, socket_2, nn_result;
     if (!PyArg_ParseTuple(args, "ii", &socket_1, &socket_2))
         return NULL;
-    return Py_BuildValue("i", nn_device(socket_1, socket_2));
+    CONCURRENCY_POINT_BEGIN
+    nn_result = nn_device(socket_1, socket_2);
+    CONCURRENCY_POINT_END
+    return Py_BuildValue("i", nn_result);
+}
+
+static PyObject *
+_nanomsg_cpy_nn_poll(PyObject *self, PyObject *args)
+{
+    int timeout_ms, res;
+    PyObject *socket_event_dict, *sockets;
+    Py_ssize_t socket_count;
+    struct nn_pollfd *fds;
+    Py_ssize_t pos;
+    int i;
+    PyObject *key, *value;
+    PyObject *code;
+    PyObject *result;
+    if (!PyArg_ParseTuple(args, "O!i", &PyDict_Type, &socket_event_dict, &timeout_ms)) {
+        return NULL;
+    }
+
+    sockets = PyDict_New();
+    socket_count = PyDict_Size(socket_event_dict);
+    fds = malloc(sizeof(struct nn_pollfd)*socket_count);
+
+    // build up fds array
+    pos = 0;
+    i = 0;
+    while (PyDict_Next(socket_event_dict, &pos, &key, &value)) {
+        fds[i].fd = (int)PyLong_AsLong(key);
+        fds[i].events = (short)PyLong_AsLong(value);
+        fds[i].revents = 0;
+        i++;
+    }
+
+    CONCURRENCY_POINT_BEGIN
+    res = nn_poll(fds, (int)socket_count, timeout_ms);
+    CONCURRENCY_POINT_END
+
+    // if success build result dictionary
+    if (res > 0) {
+        for(i = 0; i < socket_count; i++) {
+            int fd = fds[i].fd;
+            int revents = fds[i].revents;
+            PyDict_SetItem(sockets, Py_BuildValue("i", fd), Py_BuildValue("i", revents));
+        }
+    }
+
+    free(fds);
+
+    code = PyLong_FromUnsignedLong(res);
+    result = PyTuple_Pack(2, code, sockets);
+
+    return result;
 }
 
 static PyObject *
@@ -460,6 +514,7 @@ static PyMethodDef module_methods[] = {
     {"nn_send", _nanomsg_cpy_nn_send, METH_VARARGS, "send a message"},
     {"nn_recv", _nanomsg_cpy_nn_recv, METH_VARARGS, "receive a message"},
     {"nn_device", _nanomsg_cpy_nn_device, METH_VARARGS, "start a device"},
+    {"nn_poll", _nanomsg_cpy_nn_poll, METH_VARARGS, "poll sockets"},
     {"nn_term", _nanomsg_cpy_nn_term, METH_VARARGS, "notify all sockets about process termination"},
     {"nn_allocmsg", _nanomsg_cpy_nn_allocmsg, METH_VARARGS, "allocate a message"},
     {"nn_symbols", _nanomsg_cpy_nn_symbols, METH_VARARGS, "query the names and values of nanomsg symbols"},
diff --git a/_nanomsg_ctypes/__init__.py b/_nanomsg_ctypes/__init__.py
index 32fa718..43aefc1 100644
--- a/_nanomsg_ctypes/__init__.py
+++ b/_nanomsg_ctypes/__init__.py
@@ -8,6 +8,9 @@ import sys
 if sys.platform in ('win32', 'cygwin'):
     _functype = ctypes.WINFUNCTYPE
     _lib = ctypes.windll.nanomsg
+elif sys.platform == 'darwin':
+    _functype = ctypes.CFUNCTYPE
+    _lib = ctypes.cdll.LoadLibrary('libnanomsg.dylib')
 else:
     _functype = ctypes.CFUNCTYPE
     _lib = ctypes.cdll.LoadLibrary('libnanomsg.so')
@@ -24,12 +27,14 @@ def _c_func_wrapper_factory(cdecl_text):
         types = {
             'void': None,
             'char *': ctypes.c_char_p,
+            'const char *': ctypes.c_char_p,
             'int': ctypes.c_int,
             'int *': ctypes.POINTER(ctypes.c_int),
             'void *': ctypes.c_void_p,
             'size_t':  ctypes.c_size_t,
             'size_t *':  ctypes.POINTER(ctypes.c_size_t),
             'struct nn_msghdr *': ctypes.c_void_p,
+            'struct nn_pollfd *': ctypes.c_void_p,
         }
         type_def_without_const = type_def.replace('const ','')
         if type_def_without_const in types:
@@ -72,6 +77,7 @@ NN_EXPORT int nn_setsockopt (int s, int level, int option, const void \
 *optval, size_t optvallen);
 NN_EXPORT int nn_getsockopt (int s, int level, int option, void *optval, \
 size_t *optvallen);
+NN_EXPORT int nn_poll(struct nn_pollfd *fds, int nfds, int timeout);
 NN_EXPORT int nn_bind (int s, const char *addr);
 NN_EXPORT int nn_connect (int s, const char *addr);
 NN_EXPORT int nn_shutdown (int s, int how);
@@ -211,6 +217,33 @@ def nn_allocmsg(size, type):
     return _create_message(pointer, size)
 
 
+class PollFds(ctypes.Structure):
+    _fields_ = ("fd", ctypes.c_int), ("events", ctypes.c_short), ("revents", ctypes.c_short)
+
+
+def nn_poll(fds, timeout=-1):
+    """
+    nn_pollfds
+    :param fds: dict (file descriptor => pollmode)
+    :param timeout: timeout in milliseconds
+    :return:
+    """
+    polls = []
+    for i, entry in enumerate(fds.items()):
+        s = PollFds()
+        fd, event = entry
+        s.fd = fd
+        s.events = event
+        s.revents = 0
+        polls.append(s)
+
+    poll_array = (PollFds*len(fds))(*polls)
+    res = _nn_poll(poll_array, len(fds), int(timeout))
+    if res <= 0:
+        return res, {}
+    return res, {item.fd: item.revents for item in poll_array}
+
+
 def nn_recv(socket, *args):
     "receive a message"
     if len(args) == 1:
diff --git a/appveyor.yml b/appveyor.yml
new file mode 100644
index 0000000..6db46c8
--- /dev/null
+++ b/appveyor.yml
@@ -0,0 +1,66 @@
+# The template for this file was from https://packaging.python.org/appveyor/
+
+environment:
+  matrix:
+    # For Python versions available on Appveyor, see
+    # http://www.appveyor.com/docs/installed-software#python
+    - PYTHON: "C:\\Python27"
+      CMAKE_GENERATOR: "Visual Studio 9 2008"
+    - PYTHON: "C:\\Python34"
+      CMAKE_GENERATOR: "Visual Studio 10 2010"
+    - PYTHON: "C:\\Python35"
+      CMAKE_GENERATOR: "Visual Studio 14 2015"
+    - PYTHON: "C:\\Python36"
+      CMAKE_GENERATOR: "Visual Studio 14 2015"
+    - PYTHON: "C:\\Python27"
+      CMAKE_GENERATOR: "Visual Studio 9 2008 Win64"  
+    - PYTHON: "C:\\Python34-x64"
+      CMAKE_GENERATOR: "Visual Studio 10 2010 Win64"
+    - PYTHON: "C:\\Python35-x64"
+      CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"
+    - PYTHON: "C:\\Python36-x64"
+      CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"
+
+install:
+  # We need wheel installed to build wheels
+  - "%PYTHON%\\python.exe -m pip install wheel"
+  # Visual Studio 9 2008 does not come with stdint.h, so we'll copy over a
+  # different version.  We only need to do it whenever we're building with
+  # 2008, but it doesn't hurt to copy it unconditionally.  The first copy is to
+  # build nanomsg, the second is to build the extension.
+  - ps: cp "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdint.h"
+           "C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\include\\stdint.h"
+  - ps: cp "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdint.h"
+           "C:\\Users\\appveyor\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\include\\stdint.h"
+  - git clone https://github.com/nanomsg/nanomsg.git nanomsg-src
+  - pwd
+  - ps: pushd nanomsg-src
+  - git checkout 1.0.0
+  - ps: mkdir build
+  - ps: cd build
+  - cmake -DNN_STATIC_LIB=ON  -G"%CMAKE_GENERATOR%" ..
+  - cmake --build .
+  - cmake --build . --target install
+  - ps: cp Debug\nanomsg.lib ..\..
+  - ps: popd
+  - pwd
+
+build_script:
+  - "%PYTHON%\\python.exe setup.py install"
+
+test_script:
+  - "build.cmd %PYTHON%\\python.exe setup.py test"
+
+after_test:
+  # build the wheel.
+  # build.cmd sets up necessary variables for 64-bit builds
+  - "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"
+
+artifacts:
+  # bdist_wheel puts your built wheel in the dist directory
+  - path: dist\*
+
+#on_success:
+#  You can use this step to upload your artifacts to a public website.
+#  See Appveyor's documentation for more details. Or you can simply
+#  access your wheels from the Appveyor "artifacts" tab for your build.
diff --git a/build.cmd b/build.cmd
new file mode 100644
index 0000000..243dc9a
--- /dev/null
+++ b/build.cmd
@@ -0,0 +1,21 @@
+@echo off
+:: To build extensions for 64 bit Python 3, we need to configure environment
+:: variables to use the MSVC 2010 C++ compilers from GRMSDKX_EN_DVD.iso of:
+:: MS Windows SDK for Windows 7 and .NET Framework 4
+::
+:: More details at:
+:: https://github.com/cython/cython/wiki/64BitCythonExtensionsOnWindows
+
+IF "%DISTUTILS_USE_SDK%"=="1" (
+    ECHO Configuring environment to build with MSVC on a 64bit architecture
+    ECHO Using Windows SDK 7.1
+    "C:\Program Files\Microsoft SDKs\Windows\v7.1\Setup\WindowsSdkVer.exe" -q -version:v7.1
+    CALL "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 /release
+    SET MSSdk=1
+    REM Need the following to allow tox to see the SDK compiler
+    SET TOX_TESTENV_PASSENV=DISTUTILS_USE_SDK MSSdk INCLUDE LIB
+) ELSE (
+    ECHO Using default MSVC build environment
+)
+
+CALL %*
diff --git a/docs/Makefile b/docs/Makefile
new file mode 100644
index 0000000..f926aec
--- /dev/null
+++ b/docs/Makefile
@@ -0,0 +1,177 @@
+# Makefile for Sphinx documentation
+#
+
+# You can set these variables from the command line.
+SPHINXOPTS    =
+SPHINXBUILD   = sphinx-build
+PAPER         =
+BUILDDIR      = _build
+
+# User-friendly check for sphinx-build
+ifeq ($(shell which $(SPHINXBUILD) >/dev/null 2>&1; echo $$?), 1)
+$(error The '$(SPHINXBUILD)' command was not found. Make sure you have Sphinx installed, then set the SPHINXBUILD environment variable to point to the full path of the '$(SPHINXBUILD)' executable. Alternatively you can add the directory with the executable to your PATH. If you don't have Sphinx installed, grab it from http://sphinx-doc.org/)
+endif
+
+# Internal variables.
+PAPEROPT_a4     = -D latex_paper_size=a4
+PAPEROPT_letter = -D latex_paper_size=letter
+ALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .
+# the i18n builder cannot share the environment and doctrees with the others
+I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .
+
+.PHONY: help clean html dirhtml singlehtml pickle json htmlhelp qthelp devhelp epub latex latexpdf text man changes linkcheck doctest gettext
+
+help:
+	@echo "Please use \`make <target>' where <target> is one of"
+	@echo "  html       to make standalone HTML files"
+	@echo "  dirhtml    to make HTML files named index.html in directories"
+	@echo "  singlehtml to make a single large HTML file"
+	@echo "  pickle     to make pickle files"
+	@echo "  json       to make JSON files"
+	@echo "  htmlhelp   to make HTML files and a HTML help project"
+	@echo "  qthelp     to make HTML files and a qthelp project"
+	@echo "  devhelp    to make HTML files and a Devhelp project"
+	@echo "  epub       to make an epub"
+	@echo "  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter"
+	@echo "  latexpdf   to make LaTeX files and run them through pdflatex"
+	@echo "  latexpdfja to make LaTeX files and run them through platex/dvipdfmx"
+	@echo "  text       to make text files"
+	@echo "  man        to make manual pages"
+	@echo "  texinfo    to make Texinfo files"
+	@echo "  info       to make Texinfo files and run them through makeinfo"
+	@echo "  gettext    to make PO message catalogs"
+	@echo "  changes    to make an overview of all changed/added/deprecated items"
+	@echo "  xml        to make Docutils-native XML files"
+	@echo "  pseudoxml  to make pseudoxml-XML files for display purposes"
+	@echo "  linkcheck  to check all external links for integrity"
+	@echo "  doctest    to run all doctests embedded in the documentation (if enabled)"
+
+clean:
+	rm -rf $(BUILDDIR)/*
+
+html:
+	$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html
+	@echo
+	@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."
+
+dirhtml:
+	$(SPHINXBUILD) -b dirhtml $(ALLSPHINXOPTS) $(BUILDDIR)/dirhtml
+	@echo
+	@echo "Build finished. The HTML pages are in $(BUILDDIR)/dirhtml."
+
+singlehtml:
+	$(SPHINXBUILD) -b singlehtml $(ALLSPHINXOPTS) $(BUILDDIR)/singlehtml
+	@echo
+	@echo "Build finished. The HTML page is in $(BUILDDIR)/singlehtml."
+
+pickle:
+	$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) $(BUILDDIR)/pickle
+	@echo
+	@echo "Build finished; now you can process the pickle files."
+
+json:
+	$(SPHINXBUILD) -b json $(ALLSPHINXOPTS) $(BUILDDIR)/json
+	@echo
+	@echo "Build finished; now you can process the JSON files."
+
+htmlhelp:
+	$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) $(BUILDDIR)/htmlhelp
+	@echo
+	@echo "Build finished; now you can run HTML Help Workshop with the" \
+	      ".hhp project file in $(BUILDDIR)/htmlhelp."
+
+qthelp:
+	$(SPHINXBUILD) -b qthelp $(ALLSPHINXOPTS) $(BUILDDIR)/qthelp
+	@echo
+	@echo "Build finished; now you can run "qcollectiongenerator" with the" \
+	      ".qhcp project file in $(BUILDDIR)/qthelp, like this:"
+	@echo "# qcollectiongenerator $(BUILDDIR)/qthelp/nanomsg-python.qhcp"
+	@echo "To view the help file:"
+	@echo "# assistant -collectionFile $(BUILDDIR)/qthelp/nanomsg-python.qhc"
+
+devhelp:
+	$(SPHINXBUILD) -b devhelp $(ALLSPHINXOPTS) $(BUILDDIR)/devhelp
+	@echo
+	@echo "Build finished."
+	@echo "To view the help file:"
+	@echo "# mkdir -p $$HOME/.local/share/devhelp/nanomsg-python"
+	@echo "# ln -s $(BUILDDIR)/devhelp $$HOME/.local/share/devhelp/nanomsg-python"
+	@echo "# devhelp"
+
+epub:
+	$(SPHINXBUILD) -b epub $(ALLSPHINXOPTS) $(BUILDDIR)/epub
+	@echo
+	@echo "Build finished. The epub file is in $(BUILDDIR)/epub."
+
+latex:
+	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
+	@echo
+	@echo "Build finished; the LaTeX files are in $(BUILDDIR)/latex."
+	@echo "Run \`make' in that directory to run these through (pdf)latex" \
+	      "(use \`make latexpdf' here to do that automatically)."
+
+latexpdf:
+	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
+	@echo "Running LaTeX files through pdflatex..."
+	$(MAKE) -C $(BUILDDIR)/latex all-pdf
+	@echo "pdflatex finished; the PDF files are in $(BUILDDIR)/latex."
+
+latexpdfja:
+	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
+	@echo "Running LaTeX files through platex and dvipdfmx..."
+	$(MAKE) -C $(BUILDDIR)/latex all-pdf-ja
+	@echo "pdflatex finished; the PDF files are in $(BUILDDIR)/latex."
+
+text:
+	$(SPHINXBUILD) -b text $(ALLSPHINXOPTS) $(BUILDDIR)/text
+	@echo
+	@echo "Build finished. The text files are in $(BUILDDIR)/text."
+
+man:
+	$(SPHINXBUILD) -b man $(ALLSPHINXOPTS) $(BUILDDIR)/man
+	@echo
+	@echo "Build finished. The manual pages are in $(BUILDDIR)/man."
+
+texinfo:
+	$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo
+	@echo
+	@echo "Build finished. The Texinfo files are in $(BUILDDIR)/texinfo."
+	@echo "Run \`make' in that directory to run these through makeinfo" \
+	      "(use \`make info' here to do that automatically)."
+
+info:
+	$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo
+	@echo "Running Texinfo files through makeinfo..."
+	make -C $(BUILDDIR)/texinfo info
+	@echo "makeinfo finished; the Info files are in $(BUILDDIR)/texinfo."
+
+gettext:
+	$(SPHINXBUILD) -b gettext $(I18NSPHINXOPTS) $(BUILDDIR)/locale
+	@echo
+	@echo "Build finished. The message catalogs are in $(BUILDDIR)/locale."
+
+changes:
+	$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) $(BUILDDIR)/changes
+	@echo
+	@echo "The overview file is in $(BUILDDIR)/changes."
+
+linkcheck:
+	$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck
+	@echo
+	@echo "Link check complete; look for any errors in the above output " \
+	      "or in $(BUILDDIR)/linkcheck/output.txt."
+
+doctest:
+	$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest
+	@echo "Testing of doctests in the sources finished, look at the " \
+	      "results in $(BUILDDIR)/doctest/output.txt."
+
+xml:
+	$(SPHINXBUILD) -b xml $(ALLSPHINXOPTS) $(BUILDDIR)/xml
+	@echo
+	@echo "Build finished. The XML files are in $(BUILDDIR)/xml."
+
+pseudoxml:
+	$(SPHINXBUILD) -b pseudoxml $(ALLSPHINXOPTS) $(BUILDDIR)/pseudoxml
+	@echo
+	@echo "Build finished. The pseudo-XML files are in $(BUILDDIR)/pseudoxml."
diff --git a/docs/conf.py b/docs/conf.py
new file mode 100644
index 0000000..8bd0758
--- /dev/null
+++ b/docs/conf.py
@@ -0,0 +1,260 @@
+# -*- coding: utf-8 -*-
+#
+# nanomsg-python documentation build configuration file, created by
+# sphinx-quickstart on Fri Jan 23 17:17:17 2015.
+#
+# This file is execfile()d with the current directory set to its
+# containing dir.
+#
+# Note that not all possible configuration values are present in this
+# autogenerated file.
+#
+# All configuration values have a default; values that are commented out
+# serve to show the default.
+
+import sys
+import os
+
+# If extensions (or modules to document with autodoc) are in another directory,
+# add these directories to sys.path here. If the directory is relative to the
+# documentation root, use os.path.abspath to make it absolute, like shown here.
+#sys.path.insert(0, os.path.abspath('.'))
+
+# -- General configuration ------------------------------------------------
+
+# If your documentation needs a minimal Sphinx version, state it here.
+#needs_sphinx = '1.0'
+
+# Add any Sphinx extension module names here, as strings. They can be
+# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
+# ones.
+extensions = [
+    'sphinx.ext.autodoc',
+]
+
+# Add any paths that contain templates here, relative to this directory.
+templates_path = ['_templates']
+
+# The suffix of source filenames.
+source_suffix = '.rst'
+
+# The encoding of source files.
+#source_encoding = 'utf-8-sig'
+
+# The master toctree document.
+master_doc = 'index'
+
+# General information about the project.
+project = u'nanomsg-python'
+copyright = u'2015, Tony Simpson <agjasimpson@gmail.com>'
+
+# The version info for the project you're documenting, acts as replacement for
+# |version| and |release|, also used in various other places throughout the
+# built documents.
+#
+# The short X.Y version.
+version = '1.0'
+# The full version, including alpha/beta/rc tags.
+release = '1.0'
+
+# The language for content autogenerated by Sphinx. Refer to documentation
+# for a list of supported languages.
+#language = None
+
+# There are two options for replacing |today|: either, you set today to some
+# non-false value, then it is used:
+#today = ''
+# Else, today_fmt is used as the format for a strftime call.
+#today_fmt = '%B %d, %Y'
+
+# List of patterns, relative to source directory, that match files and
+# directories to ignore when looking for source files.
+exclude_patterns = ['_build']
+
+# The reST default role (used for this markup: `text`) to use for all
+# documents.
+#default_role = None
+
+# If true, '()' will be appended to :func: etc. cross-reference text.
+#add_function_parentheses = True
+
+# If true, the current module name will be prepended to all description
+# unit titles (such as .. function::).
+#add_module_names = True
+
+# If true, sectionauthor and moduleauthor directives will be shown in the
+# output. They are ignored by default.
+#show_authors = False
+
+# The name of the Pygments (syntax highlighting) style to use.
+pygments_style = 'sphinx'
+
+# A list of ignored prefixes for module index sorting.
+#modindex_common_prefix = []
+
+# If true, keep warnings as "system message" paragraphs in the built documents.
+#keep_warnings = False
+
+
+# -- Options for HTML output ----------------------------------------------
+
+# The theme to use for HTML and HTML Help pages.  See the documentation for
+# a list of builtin themes.
+html_theme = 'default'
+
+# Theme options are theme-specific and customize the look and feel of a theme
+# further.  For a list of options available for each theme, see the
+# documentation.
+#html_theme_options = {}
+
+# Add any paths that contain custom themes here, relative to this directory.
+#html_theme_path = []
+
+# The name for this set of Sphinx documents.  If None, it defaults to
+# "<project> v<release> documentation".
+#html_title = None
+
+# A shorter title for the navigation bar.  Default is the same as html_title.
+#html_short_title = None
+
+# The name of an image file (relative to this directory) to place at the top
+# of the sidebar.
+#html_logo = None
+
+# The name of an image file (within the static path) to use as favicon of the
+# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
+# pixels large.
+#html_favicon = None
+
+# Add any paths that contain custom static files (such as style sheets) here,
+# relative to this directory. They are copied after the builtin static files,
+# so a file named "default.css" will overwrite the builtin "default.css".
+html_static_path = ['_static']
+
+# Add any extra paths that contain custom files (such as robots.txt or
+# .htaccess) here, relative to this directory. These files are copied
+# directly to the root of the documentation.
+#html_extra_path = []
+
+# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
+# using the given strftime format.
+#html_last_updated_fmt = '%b %d, %Y'
+
+# If true, SmartyPants will be used to convert quotes and dashes to
+# typographically correct entities.
+#html_use_smartypants = True
+
+# Custom sidebar templates, maps document names to template names.
+#html_sidebars = {}
+
+# Additional templates that should be rendered to pages, maps page names to
+# template names.
+#html_additional_pages = {}
+
+# If false, no module index is generated.
+#html_domain_indices = True
+
+# If false, no index is generated.
+#html_use_index = True
+
+# If true, the index is split into individual pages for each letter.
+#html_split_index = False
+
+# If true, links to the reST sources are added to the pages.
+#html_show_sourcelink = True
+
+# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
+#html_show_sphinx = True
+
+# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
+#html_show_copyright = True
+
+# If true, an OpenSearch description file will be output, and all pages will
+# contain a <link> tag referring to it.  The value of this option must be the
+# base URL from which the finished HTML is served.
+#html_use_opensearch = ''
+
+# This is the file name suffix for HTML files (e.g. ".xhtml").
+#html_file_suffix = None
+
+# Output file base name for HTML help builder.
+htmlhelp_basename = 'nanomsg-pythondoc'
+
+
+# -- Options for LaTeX output ---------------------------------------------
+
+latex_elements = {
+# The paper size ('letterpaper' or 'a4paper').
+#'papersize': 'letterpaper',
+
+# The font size ('10pt', '11pt' or '12pt').
+#'pointsize': '10pt',
+
+# Additional stuff for the LaTeX preamble.
+#'preamble': '',
+}
+
+# Grouping the document tree into LaTeX files. List of tuples
+# (source start file, target name, title,
+#  author, documentclass [howto, manual, or own class]).
+latex_documents = [
+  ('index', 'nanomsg-python.tex', u'nanomsg-python Documentation',
+   u'Tony Simpson \\textless{}agjasimpson@gmail.com\\textgreater{}', 'manual'),
+]
+
+# The name of an image file (relative to this directory) to place at the top of
+# the title page.
+#latex_logo = None
+
+# For "manual" documents, if this is true, then toplevel headings are parts,
+# not chapters.
+#latex_use_parts = False
+
+# If true, show page references after internal links.
+#latex_show_pagerefs = False
+
+# If true, show URL addresses after external links.
+#latex_show_urls = False
+
+# Documents to append as an appendix to all manuals.
+#latex_appendices = []
+
+# If false, no module index is generated.
+#latex_domain_indices = True
+
+
+# -- Options for manual page output ---------------------------------------
+
+# One entry per manual page. List of tuples
+# (source start file, name, description, authors, manual section).
+man_pages = [
+    ('index', 'nanomsg-python', u'nanomsg-python Documentation',
+     [u'Tony Simpson <agjasimpson@gmail.com>'], 1)
+]
+
+# If true, show URL addresses after external links.
+#man_show_urls = False
+
+
+# -- Options for Texinfo output -------------------------------------------
+
+# Grouping the document tree into Texinfo files. List of tuples
+# (source start file, target name, title, author,
+#  dir menu entry, description, category)
+texinfo_documents = [
+  ('index', 'nanomsg-python', u'nanomsg-python Documentation',
+   u'Tony Simpson <agjasimpson@gmail.com>', 'nanomsg-python', 'One line description of project.',
+   'Miscellaneous'),
+]
+
+# Documents to append as an appendix to all manuals.
+#texinfo_appendices = []
+
+# If false, no module index is generated.
+#texinfo_domain_indices = True
+
+# How to display URL addresses: 'footnote', 'no', or 'inline'.
+#texinfo_show_urls = 'footnote'
+
+# If true, do not generate a @detailmenu in the "Top" node's menu.
+#texinfo_no_detailmenu = False
diff --git a/docs/index.rst b/docs/index.rst
new file mode 100644
index 0000000..62c29bb
--- /dev/null
+++ b/docs/index.rst
@@ -0,0 +1,21 @@
+Welcome to nanomsg-python's documentation!
+==========================================
+
+.. automodule:: nanomsg
+    :members:
+    :inherited-members:
+    :undoc-members:
+
+.. automodule:: nanomsg_wrappers
+    :members:
+    :inherited-members:
+    :undoc-members:
+
+
+Indices and tables
+==================
+
+* :ref:`genindex`
+* :ref:`modindex`
+* :ref:`search`
+
diff --git a/nanomsg/__init__.py b/nanomsg/__init__.py
index 447067e..93eb3f7 100644
--- a/nanomsg/__init__.py
+++ b/nanomsg/__init__.py
@@ -13,7 +13,7 @@ except NameError:
 
 nanoconfig_started = False
 
-#Import contants into module with NN_ prefix stripped
+#Import constants into module with NN_ prefix stripped
 for name, value in wrapper.nn_symbols():
     if name.startswith('NN_'):
         name = name[3:]
@@ -91,12 +91,48 @@ def terminate_all():
     wrapper.nn_term()
 
 
+def poll(in_sockets, out_sockets, timeout=-1):
+    """
+    Poll a list of sockets
+    :param in_sockets: sockets for reading
+    :param out_sockets: sockets for writing
+    :param timeout: poll timeout in seconds, -1 is infinite wait
+    :return: tuple (read socket list, write socket list)
+    """
+    sockets = {}
+    # reverse map fd => socket
+    fd_sockets = {}
+    for s in in_sockets:
+        sockets[s.fd] = POLLIN
+        fd_sockets[s.fd] = s
+    for s in out_sockets:
+        modes = sockets.get(s.fd, 0)
+        sockets[s.fd] = modes | POLLOUT
+        fd_sockets[s.fd] = s
+
+    # convert to milliseconds or -1
+    if timeout >= 0:
+        timeout_ms = int(timeout*1000)
+    else:
+        timeout_ms = -1
+    res, sockets = wrapper.nn_poll(sockets, timeout_ms)
+    _nn_check_positive_rtn(res)
+    read_list, write_list = [], []
+    for fd, result in sockets.items():
+        if (result & POLLIN) != 0:
+            read_list.append(fd_sockets[fd])
+        if (result & POLLOUT) != 0:
+            write_list.append(fd_sockets[fd])
+
+    return read_list, write_list
+
+
 class Socket(object):
     """Class wrapping nanomsg socket.
 
     protocol should be a nanomsg protocol constant e.g. nanomsg.PAIR
 
-    This class supports being used as a context manager which should gaurentee
+    This class supports being used as a context manager which should guarantee
     it is closed.
 
     e.g.:
@@ -137,11 +173,11 @@ class Socket(object):
 
         def shutdown(self):
             self._fdocket._endpoints.remove(self)
-            _nn_check_positive_rtn(nn_shutdown(self._fdocket._s,
+            _nn_check_positive_rtn(wrapper.nn_shutdown(self._fdocket._fd,
                                                self._endpoint_id))
 
         def __repr__(self):
-            return '<%s socket %r, id %r, addresss %r>' % (
+            return '<%s socket %r, id %r, address %r>' % (
                 self.__class__.__name__,
                 self._fdocket,
                 self._endpoint_id,
@@ -226,7 +262,7 @@ class Socket(object):
                        'milliseconds (0.001 seconds)')
     recv_buffer_size = property(_get_recv_buffer_size, _set_recv_buffer_size,
                                 doc='Receive buffer size in bytes')
-    send_buffer_size = property(_get_send_buffer_size, _set_send_timeout,
+    send_buffer_size = property(_get_send_buffer_size, _set_send_buffer_size,
                                 doc='Send buffer size in bytes')
     send_timeout = property(_get_send_timeout, _set_send_timeout,
                             doc='Send timeout in milliseconds (0.001 seconds)')
@@ -249,7 +285,7 @@ class Socket(object):
     def fd(self):
         """Socket file descripter.
 
-        Not this is not an OS file descripter (see .send_fd, .recv_fd).
+        Note this is not an OS file descripter (see .send_fd, .recv_fd).
         """
         return self._fd
 
@@ -369,10 +405,10 @@ class Socket(object):
         return '<%s fd %r, connected to %r, bound to %r>' % (
             self.__class__.__name__,
             self.fd,
-            [i.address for i in self.endpoints if type(i) is
-             Socket.BindEndpoint],
             [i.address for i in self.endpoints if type(i) is
              Socket.ConnectEndpoint],
+            [i.address for i in self.endpoints if type(i) is
+             Socket.BindEndpoint],
         )
 
     def __del__(self):
diff --git a/setup.py b/setup.py
index 6274c49..9d31dc1 100644
--- a/setup.py
+++ b/setup.py
@@ -1,14 +1,10 @@
-from __future__ import division, absolute_import, print_function,\
- unicode_literals
+from __future__ import division, absolute_import, print_function, unicode_literals
 
 import os
+import platform
 import sys
-try:
-    from setuptools import setup
-except ImportError:
-    from distutils.core import setup, Extension
+from setuptools import setup
 from distutils.core import Extension
-from distutils.errors import DistutilsError
 from distutils.command.build_ext import build_ext
 
 
@@ -16,46 +12,41 @@ with open(os.path.join('nanomsg','version.py')) as f:
     exec(f.read())
 
 
-class skippable_build_ext(build_ext):
-    def run(self):
-        try:
-            build_ext.run(self)
-        except Exception as e:
-            print()
-            print("=" * 79)
-            print("WARNING : CPython API extension could not be built.")
-            print()
-            print("Exception was : %r" % (e,))
-            print()
-            print(
-                "If you need the extensions (they may be faster than "
-                "alternative on some"
-            )
-            print(" platforms) check you have a compiler configured with all"
-                  " the necessary")
-            print(" headers and libraries.")
-            print("=" * 79)
-            print()
+libraries = [str('nanomsg')]
+# add additional necessary library/include path info if we're on Windows
+if sys.platform in ("win32", "cygwin"):
+    libraries.extend([str('ws2_32'), str('advapi32'), str('mswsock')])
+    # nanomsg installs to different directory based on architecture
+    arch = platform.architecture()[0]
+    if arch == "64bit":
+        include_dirs=[r'C:\Program Files\nanomsg\include',]
+    else:
+        include_dirs=[r'C:\Program Files (x86)\nanomsg\include',]
+else:
+    include_dirs = None
 
 try:
     import ctypes
     if sys.platform in ('win32', 'cygwin'):
         _lib = ctypes.windll.nanoconfig
+    elif sys.platform == 'darwin':
+        _lib = ctypes.cdll.LoadLibrary('libnanoconfig.dylib')
     else:
         _lib = ctypes.cdll.LoadLibrary('libnanoconfig.so')
 except OSError:
-    # Building without nanoconfig
-    cpy_extension = Extension(str('_nanomsg_cpy'),
-                        sources=[str('_nanomsg_cpy/wrapper.c')],
-                        libraries=[str('nanomsg')],
-                        )
+    # Building without nanoconfig; need to turn NN_STATIC_LIB on
+    define_macros = [('NN_STATIC_LIB','ON')]
 else:
     # Building with nanoconfig
-    cpy_extension = Extension(str('_nanomsg_cpy'),
-                        define_macros=[('WITH_NANOCONFIG', '1')],
-                        sources=[str('_nanomsg_cpy/wrapper.c')],
-                        libraries=[str('nanomsg'), str('nanoconfig')],
-                        )
+    libraries.append(str('nanoconfig'))
+    define_macros = [('WITH_NANOCONFIG', '1')]
+
+cpy_extension = Extension(str('_nanomsg_cpy'),
+                    define_macros=define_macros,
+                    sources=[str('_nanomsg_cpy/wrapper.c')],
+                    libraries=libraries,
+                    include_dirs=include_dirs,
+                    )
 install_requires = []
 
 try:
@@ -69,7 +60,6 @@ setup(
     version=__version__,
     packages=[str('nanomsg'), str('_nanomsg_ctypes'), str('nanomsg_wrappers')],
     ext_modules=[cpy_extension],
-    cmdclass = {'build_ext': skippable_build_ext},
     install_requires=install_requires,
     description='Python library for nanomsg.',
     classifiers=[
diff --git a/tests/test_general_socket_methods.py b/tests/test_general_socket_methods.py
index 1b878ae..50e5a63 100644
--- a/tests/test_general_socket_methods.py
+++ b/tests/test_general_socket_methods.py
@@ -8,14 +8,12 @@ set_wrapper_choice(os.environ.get('NANOMSG_PY_TEST_WRAPPER',
 from nanomsg import (
     PAIR,
     Socket,
-    LINGER,
+    SNDBUF,
     SOL_SOCKET
 )
 
 SOCKET_ADDRESS = os.environ.get('NANOMSG_PY_TEST_ADDRESS', "inproc://a")
 
-LINGER_DEFAULT_VALUE = 1000
-
 
 class TestGeneralSocketMethods(unittest.TestCase):
     def setUp(self):
@@ -42,19 +40,14 @@ class TestGeneralSocketMethods(unittest.TestCase):
 
         self.assertFalse(self.socket.is_open())
 
-    def test_set_int_option(self):
+    def test_set_and_get_int_option(self):
         expected = 500
 
-        self.socket.set_int_option(SOL_SOCKET, LINGER, expected)
+        self.socket.set_int_option(SOL_SOCKET, SNDBUF, expected)
 
-        actual = self.socket.get_int_option(SOL_SOCKET, LINGER)
+        actual = self.socket.get_int_option(SOL_SOCKET, SNDBUF)
         self.assertEqual(expected, actual)
 
-    def test_get_int_option(self):
-        actual = self.socket.get_int_option(SOL_SOCKET, LINGER)
-
-        self.assertEqual(LINGER_DEFAULT_VALUE, actual)
-
 
 if __name__ == '__main__':
     unittest.main()
diff --git a/tests/test_poll.py b/tests/test_poll.py
new file mode 100644
index 0000000..d2b250d
--- /dev/null
+++ b/tests/test_poll.py
@@ -0,0 +1,77 @@
+import unittest
+import os
+import uuid
+import time
+
+from nanomsg_wrappers import set_wrapper_choice, get_default_for_platform
+set_wrapper_choice(os.environ.get('NANOMSG_PY_TEST_WRAPPER',
+                                  get_default_for_platform()))
+
+from nanomsg import (
+    PAIR,
+    DONTWAIT,
+    SOL_SOCKET,
+    SNDBUF,
+    poll,
+    Socket,
+    NanoMsgAPIError
+)
+
+SOCKET_ADDRESS = os.environ.get('NANOMSG_PY_TEST_ADDRESS', "inproc://{0}".format(uuid.uuid4()))
+
+
+class TestPoll(unittest.TestCase):
+    def test_read_poll(self):
+        with Socket(PAIR) as s1:
+            with Socket(PAIR) as s2:
+                s1.bind(SOCKET_ADDRESS)
+                s2.connect(SOCKET_ADDRESS)
+                r, _ = poll([s1, s2], [], 0)
+                self.assertEqual(0, len(r), "Precondition nothing to read")
+                sent = b'ABC'
+                s2.send(sent)
+                r, _ = poll([s1, s2], [], 0)
+                self.assertTrue(s1 in r, "Socket is in read list")
+                received = s1.recv()
+
+    def test_write_poll(self):
+        with Socket(PAIR) as s1:
+            with Socket(PAIR) as s2:
+                s1.bind(SOCKET_ADDRESS)
+                s2.connect(SOCKET_ADDRESS)
+                r, w = poll([], [s1, s2], 2)
+                self.assertEqual(2, len(w), "Precondition nothing to read")
+                sent = b'ABCD'
+
+                # minimum send size
+                snd_buf_size = 128*1024
+                s2.set_int_option(SOL_SOCKET, SNDBUF, snd_buf_size)
+
+                # send until full
+                for i in range(snd_buf_size//len(sent)+1):
+                    try:
+                        s2.send(sent, DONTWAIT)
+                    except:
+                        pass
+
+                # poll
+                r, w = poll([], [s1, s2], 0)
+                self.assertTrue(s2 not in w, "Socket is in write list")
+                received = s1.recv()
+
+    def test_poll_timeout(self):
+        with Socket(PAIR) as s1:
+            with Socket(PAIR) as s2:
+                s1.bind(SOCKET_ADDRESS)
+                s2.connect(SOCKET_ADDRESS)
+                start_time = time.time()
+                timeout = .05
+                r, _ = poll([s1, s2], [], timeout)
+                end_time = time.time()
+                self.assertTrue(end_time-start_time-timeout < .030)
+                self.assertEqual(0, len(r), "No sockets to read")
+
+
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/usr_local_setup.cfg b/usr_local_setup.cfg
new file mode 100644
index 0000000..472a971
--- /dev/null
+++ b/usr_local_setup.cfg
@@ -0,0 +1,5 @@
+[build_ext]
+include_dirs=/usr/local/include
+library_dirs=/usr/local/lib
+rpath=/usr/local/lib
+
